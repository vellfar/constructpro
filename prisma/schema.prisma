generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  username              String                @unique
  password              String
  firstName             String
  lastName              String
  phoneNumber           String?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  roleId                Int
  employeeId            Int?                  @unique

  // Relations
  role                  Role                  @relation(fields: [roleId], references: [id])
  employee              Employee?             @relation(fields: [employeeId], references: [id])
  createdProjects       Project[]             @relation("ProjectCreatedBy")
  projectAssignments    ProjectAssignment[]
  fuelRequestsRequested FuelRequest[]         @relation("RequestedBy")
  fuelRequestsApproved  FuelRequest[]         @relation("ApprovedBy")
  fuelRequestsIssued    FuelRequest[]         @relation("IssuedBy")
  fuelRequestsAcknowledged FuelRequest[]      @relation("AcknowledgedBy")
  fuelRequestsCompleted FuelRequest[]         @relation("CompletedBy")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  users       User[]
  permissions Permission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles       Role[]
}

model Employee {
  id                  Int       @id @default(autoincrement())
  employeeNumber      String    @unique
  firstName           String
  lastName            String
  dateOfAppointment   DateTime
  section             String
  designation         String
  wageAmount          Float
  wageFrequency       String
  gender              String
  bank                String?
  accountNumber       String?
  bankBranch          String?
  employmentTerms     String
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  user                User?
  activities          Activity[]
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projects    Project[]
}

model Project {
  id                    Int                   @id @default(autoincrement())
  name                  String
  description           String?
  location              String?
  startDate             DateTime
  endDate               DateTime?
  budget                Float
  status                ProjectStatus         @default(PLANNING)
  projectCode           String                @unique
  clientId              Int?
  createdById           Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relations
  client                Client?               @relation(fields: [clientId], references: [id])
  createdBy             User                  @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  activities            Activity[]
  equipmentAssignments  EquipmentAssignment[]
  projectAssignments    ProjectAssignment[]
  fuelRequests          FuelRequest[]
  invoices              Invoice[]       // ✅ If you want to include invoices
}

model ProjectAssignment {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  role      String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Activity {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  projectId   Int
  employeeId  Int?           // Added employee relation
  startDate   DateTime?
  endDate     DateTime?
  status      ActivityStatus @default(PLANNED)
  quantity    Float?         // Added for cost calculations
  unitCost    Float?         // Added for cost calculations
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee    Employee?      @relation(fields: [employeeId], references: [id])
}

model Equipment {
  id                  Int                   @id @default(autoincrement())
  equipmentCode       String                @unique
  name                String
  type                String
  make                String
  model               String
  yearOfManufacture   Int?
  ownership           EquipmentOwnership
  measurementType     String
  unit                String
  size                Float?
  workMeasure         String
  acquisitionCost     Float?
  supplier            String?
  dateReceived        DateTime?
  status              EquipmentStatus       @default(OPERATIONAL)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  // Relations
  assignments         EquipmentAssignment[]
  fuelRequests        FuelRequest[]
}

model EquipmentAssignment {
  id          Int       @id @default(autoincrement())
  equipmentId Int
  projectId   Int
  startDate   DateTime
  endDate     DateTime?
  assignedBy  String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model FuelRequest {
  id                      Int               @id @default(autoincrement())
  requestNumber           String            @unique
  equipmentId             Int
  projectId               Int
  fuelType                FuelType
  requestedQuantity       Float
  requestedById           Int
  justification           String?
  urgency                 FuelUrgency       @default(MEDIUM)
  status                  FuelRequestStatus @default(PENDING)
  quantity                Float?            // Added for consistency
  
  // Approval fields
  approvedById            Int?
  approvalDate            DateTime?
  approvedQuantity        Float?
  approvalComments        String?
  rejectionReason         String?
  
  // Issuance fields
  issuedById              Int?
  issuanceDate            DateTime?
  issuedQuantity          Float?
  issuanceComments        String?
  
  // Acknowledgment fields
  acknowledgedById        Int?
  acknowledgmentDate      DateTime?
  acknowledgedQuantity    Float?
  acknowledgmentComments  String?
  
  // Completion fields
  completedById           Int?
  completionDate          DateTime?
  completionComments      String?
  
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  // Relations
  equipment               Equipment         @relation(fields: [equipmentId], references: [id])
  project                 Project           @relation(fields: [projectId], references: [id])
  requestedBy             User              @relation("RequestedBy", fields: [requestedById], references: [id])
  approvedBy              User?             @relation("ApprovedBy", fields: [approvedById], references: [id])
  issuedBy                User?             @relation("IssuedBy", fields: [issuedById], references: [id])
  acknowledgedBy          User?             @relation("AcknowledgedBy", fields: [acknowledgedById], references: [id])
  completedBy             User?             @relation("CompletedBy", fields: [completedById], references: [id])
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  entityType  String
  entityId    Int
  oldValues   Json?
  newValues   Json?
  userId      Int
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

// Enums
enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EquipmentStatus {
  OPERATIONAL
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum EquipmentOwnership {
  OWNED
  RENTED
  LEASED
}

enum FuelType {
  DIESEL
  PETROL
  KEROSENE
}

enum FuelRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ISSUED
  ACKNOWLEDGED
  COMPLETED
  CANCELLED
}

enum FuelUrgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Invoice {
  id                     Int      @id @default(autoincrement())
  invoiceNumber          String   @unique    // ✅ Add this line
  projectId              Int
  serviceProvider        String
  amount                 Float
  invoiceDate            DateTime
  dateReceived           DateTime
  contractNumber         String?
  status                 String
  procurementDescription String
  providerId             String?
  documentId             Int?
  goodsReceivedNote      String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  project                Project  @relation(fields: [projectId], references: [id])
}