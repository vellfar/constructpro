enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EquipmentStatus {
  OPERATIONAL
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  username              String                @unique
  password              String
  firstName             String
  lastName              String
  phoneNumber           String?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  createdBy             String?
  updatedBy             String?
  deletedBy             String?
  roleId                Int
  employeeId            Int?                  @unique

  // Relations
  role                  Role                  @relation(fields: [roleId], references: [id], onDelete: Restrict)
  employee              Employee?             @relation(fields: [employeeId], references: [id])
  createdProjects       Project[]             @relation("ProjectCreatedBy")
  projectAssignments    ProjectAssignment[]
  equipmentAssignments  EquipmentAssignment[]
  fuelRequestsRequested FuelRequest[]         @relation("RequestedBy")
  fuelRequestsApproved  FuelRequest[]         @relation("ApprovedBy")
  fuelRequestsIssued    FuelRequest[]         @relation("IssuedBy")
  fuelRequestsAcknowledged FuelRequest[]      @relation("AcknowledgedBy")
  fuelRequestsCompleted FuelRequest[]         @relation("CompletedBy")
  purchaseOrdersCreated PurchaseOrder[]       @relation("PurchaseOrderCreatedBy")
  purchaseOrdersApproved PurchaseOrder[]      @relation("PurchaseOrderApprovedBy")
  purchaseOrdersReceived PurchaseOrder[]      @relation("PurchaseOrderReceivedBy")
  materialRequestsCreated MaterialRequest[]   @relation("MaterialRequestCreatedBy")
  materialRequestsApproved MaterialRequest[]  @relation("MaterialRequestApprovedBy")
  materialRequestsIssued MaterialRequest[]    @relation("MaterialRequestIssuedBy")
  materialRequestsAcknowledged MaterialRequest[] @relation("MaterialRequestAcknowledgedBy")
  materialRequestsCompleted MaterialRequest[] @relation("MaterialRequestCompletedBy")
  materialTransactionsPerformed MaterialTransaction[]
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  users       User[]
  permissions Permission[]
  rolePermissions RolePermission[]
}

// Granular permission assignment for roles
model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int

  // Relations
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles       Role[]
  rolePermissions RolePermission[]
}

model Employee {
  id                  Int       @id @default(autoincrement())
  employeeNumber      String    @unique
  firstName           String
  lastName            String
  dateOfAppointment   DateTime
  section             String
  designation         String
  wageAmount          Float
  wageFrequency       String
  gender              String
  bank                String?
  accountNumber       String?
  bankBranch          String?
  employmentTerms     String
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  user                User?
  activities          Activity[]
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projects    Project[]
}

model Project {
  id                    Int                   @id @default(autoincrement())
  name                  String
  description           String?
  location              String?
  startDate             DateTime
  plannedEndDate        DateTime?
  actualEndDate         DateTime?
  budget                Float
  status                ProjectStatus         @default(PLANNING)
  projectCode           String                @unique
  clientId              Int?
  createdById           Int
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // Relations
  client                Client?               @relation(fields: [clientId], references: [id])
  createdBy             User                  @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  activities            Activity[]
  equipmentAssignments  EquipmentAssignment[]
  projectAssignments    ProjectAssignment[]
  fuelRequests          FuelRequest[]
  invoices              Invoice[]       // âœ… If you want to include invoices
  purchaseOrders        PurchaseOrder[]
  materialInventories   MaterialInventory[]
  materialRequests      MaterialRequest[]
}

model ProjectAssignment {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  role      String
  startDate DateTime
  endDate     DateTime?
  status      String   @default("ACTIVE")
  assignedBy String?
  assignedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Activity {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  projectId   Int
  employeeId  Int?           // Added employee relation
  startDate   DateTime?
  endDate     DateTime?
  status      ActivityStatus @default(PLANNED)
  quantity    Float?         // Added for cost calculations
  unitCost    Float?         // Added for cost calculations
  assignedBy  String?
  assignedAt  DateTime?
  completedBy String?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  deletedBy   String?

  // Relations
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee    Employee?      @relation(fields: [employeeId], references: [id])
}

model Equipment {
  id                  Int                   @id @default(autoincrement())
  equipmentCode       String                @unique
  name                String
  type                String
  make                String
  model               String
  yearOfManufacture   Int?
  ownership           EquipmentOwnership
  measurementType     String
  unit                String
  size                Float?
  workMeasure         String
  acquisitionCost     Float?
  supplier            String?
  dateReceived        DateTime?
  status              EquipmentStatus       @default(OPERATIONAL)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  // Relations
  assignments         EquipmentAssignment[]
  fuelRequests        FuelRequest[]
  assessments         EquipmentAssessment[]
  locations           EquipmentLocation[]
}

model EquipmentAssessment {
  id            Int        @id @default(autoincrement())
  equipmentId   Int
  assessmentDate DateTime
  assessor      String
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  equipment     Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model EquipmentLocation {
  id            Int        @id @default(autoincrement())
  equipmentId   Int
  location      String
  startDate     DateTime   @default(now())
  endDate       DateTime?
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  equipment     Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([startDate])
  @@index([endDate])
}

model EquipmentAssignment {
  id          Int       @id @default(autoincrement())
  equipmentId Int
  userId      Int?
  projectId   Int
  startDate   DateTime  @default(now())
  endDate     DateTime?
  assignedBy  String
  assignedAt  DateTime  @default(now())
  status      String    @default("ACTIVE")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([startDate])
  @@index([endDate])
}

model FuelRequest {
  id                      Int               @id @default(autoincrement())
  requestNumber           String            @unique
  equipmentId             Int
  projectId               Int
  fuelType                FuelType
  requestedQuantity       Float
  requestedById           Int
  justification           String?
  urgency                 FuelUrgency       @default(MEDIUM)
  status                  FuelRequestStatus @default(PENDING)
  quantity                Float?            // Added for consistency
  
  // Approval fields
  approvedById            Int?
  approvalDate            DateTime?
  approvedQuantity        Float?
  approvalComments        String?
  rejectionReason         String?
  
  // Issuance fields
  issuedById              Int?
  issuanceDate            DateTime?
  issuedQuantity          Float?
  issuedTo                String? // Name of the person fuel is issued to
  issuanceComments        String?
  
  // Acknowledgment fields
  acknowledgedById        Int?
  acknowledgmentDate      DateTime?
  acknowledgedQuantity    Float?
  acknowledgmentComments  String?
  
  // Completion fields
  completedById           Int?
  completionDate          DateTime?
  completionComments      String?

  // Odometer reading (km)
  odometerKm             Float?
  
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  // Relations
  equipment               Equipment         @relation(fields: [equipmentId], references: [id])
  project                 Project           @relation(fields: [projectId], references: [id])
  requestedBy             User              @relation("RequestedBy", fields: [requestedById], references: [id])
  approvedBy              User?             @relation("ApprovedBy", fields: [approvedById], references: [id])
  issuedBy                User?             @relation("IssuedBy", fields: [issuedById], references: [id])
  acknowledgedBy          User?             @relation("AcknowledgedBy", fields: [acknowledgedById], references: [id])
  completedBy             User?             @relation("CompletedBy", fields: [completedById], references: [id])
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt //add project
}

// Material Management Models

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  taxNumber     String?
  paymentTerms  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  materials      Material[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Material {
  id                 Int      @id @default(autoincrement())
  materialCode       String   @unique
  name               String
  description        String?
  category           String
  unit               String
  unitCost           Decimal? @db.Decimal(10, 2)
  minimumStockLevel  Decimal? @db.Decimal(10, 2) @default(0)
  maximumStockLevel  Decimal? @db.Decimal(10, 2)
  reorderPoint       Decimal? @db.Decimal(10, 2)
  supplierId         Int?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  supplier            Supplier?             @relation(fields: [supplierId], references: [id])
  inventory           MaterialInventory[]
  requests            MaterialRequest[]
  transactions        MaterialTransaction[]
  purchaseOrderItems  PurchaseOrderItem[]

  @@map("materials")
}

model MaterialInventory {
  id                Int      @id @default(autoincrement())
  materialId        Int
  locationType      LocationType
  locationReference String?
  projectId         Int?
  currentStock      Decimal  @db.Decimal(10, 2) @default(0)
  reservedStock     Decimal  @db.Decimal(10, 2) @default(0)
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id])

  @@unique([materialId, locationType, locationReference, projectId])
  @@map("material_inventory")
}

model MaterialRequest {
  id                      Int                   @id @default(autoincrement())
  requestNumber           String                @unique
  materialId              Int
  projectId               Int
  requestedById           Int
  requestedQuantity       Decimal               @db.Decimal(10, 2)
  approvedQuantity        Decimal?              @db.Decimal(10, 2)
  issuedQuantity          Decimal?              @db.Decimal(10, 2)
  acknowledgedQuantity    Decimal?              @db.Decimal(10, 2)
  unitCost                Decimal?              @db.Decimal(10, 2)
  totalCost               Decimal?              @db.Decimal(15, 2)
  justification           String
  urgency                 MaterialUrgency       @default(NORMAL)
  status                  MaterialRequestStatus @default(PENDING)
  deliveryLocation        LocationType          @default(SITE)
  requiredDate            DateTime?
  requestDate             DateTime              @default(now())
  approvalDate            DateTime?
  issuanceDate            DateTime?
  acknowledgmentDate      DateTime?
  completionDate          DateTime?
  approvedById            Int?
  issuedById              Int?
  acknowledgedById        Int?
  completedById           Int?
  approvalComments        String?
  issuanceComments        String?
  acknowledgmentComments  String?
  completionComments      String?
  rejectionReason         String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  // Relations
  material       Material @relation(fields: [materialId], references: [id])
  project        Project  @relation(fields: [projectId], references: [id])
  requestedBy    User     @relation("MaterialRequestCreatedBy", fields: [requestedById], references: [id])
  approvedBy     User?    @relation("MaterialRequestApprovedBy", fields: [approvedById], references: [id])
  issuedBy       User?    @relation("MaterialRequestIssuedBy", fields: [issuedById], references: [id])
  acknowledgedBy User?    @relation("MaterialRequestAcknowledgedBy", fields: [acknowledgedById], references: [id])
  completedBy    User?    @relation("MaterialRequestCompletedBy", fields: [completedById], references: [id])

  @@map("material_requests")
}

model MaterialTransaction {
  id                    Int                   @id @default(autoincrement())
  materialId            Int
  transactionType       TransactionType
  referenceType         String?
  referenceId           Int?
  fromLocationType      LocationType?
  fromLocationReference String?
  fromProjectId         Int?
  toLocationType        LocationType?
  toLocationReference   String?
  toProjectId           Int?
  quantity              Decimal               @db.Decimal(10, 2)
  unitCost              Decimal?              @db.Decimal(10, 2)
  totalCost             Decimal?              @db.Decimal(15, 2)
  transactionDate       DateTime              @default(now())
  performedById         Int?
  notes                 String?
  createdAt             DateTime              @default(now())

  // Relations
  material    Material @relation(fields: [materialId], references: [id])
  performedBy User?    @relation(fields: [performedById], references: [id])

  @@map("material_transactions")
}

model PurchaseOrder {
  id                   Int                 @id @default(autoincrement())
  poNumber             String              @unique
  supplierId           Int
  projectId            Int?
  status               PurchaseOrderStatus @default(DRAFT)
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  actualDeliveryDate   DateTime?
  totalAmount          Decimal?            @db.Decimal(15, 2)
  taxAmount            Decimal?            @db.Decimal(15, 2)
  grandTotal           Decimal?            @db.Decimal(15, 2)
  deliveryLocation     LocationType        @default(STORE)
  deliveryAddress      String?
  termsAndConditions   String?
  createdById          Int?
  approvedById         Int?
  receivedById         Int?
  notes                String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  // Relations
  supplier   Supplier            @relation(fields: [supplierId], references: [id])
  project    Project?            @relation(fields: [projectId], references: [id])
  createdBy  User?               @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  approvedBy User?               @relation("PurchaseOrderApprovedBy", fields: [approvedById], references: [id])
  receivedBy User?               @relation("PurchaseOrderReceivedBy", fields: [receivedById], references: [id])
  items      PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id                Int           @id @default(autoincrement())
  purchaseOrderId   Int
  materialId        Int
  quantity          Decimal       @db.Decimal(10, 2)
  unitCost          Decimal       @db.Decimal(10, 2)
  totalCost         Decimal       @db.Decimal(15, 2)
  receivedQuantity  Decimal       @db.Decimal(10, 2) @default(0)
  notes             String?
  createdAt         DateTime      @default(now())

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  material      Material      @relation(fields: [materialId], references: [id])

  @@map("purchase_order_items")
}

model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  projectId     Int
  amount        Decimal       @db.Decimal(15, 2)
  status        InvoiceStatus @default(PENDING)
  invoiceDate   DateTime
  dueDate       DateTime?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  project Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items   InvoiceItem[]

  @@map("invoices")
}


model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(15, 2)

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}




// Enums
enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum EquipmentOwnership {
  OWNED
  RENTED
  LEASED
  UNRA
  MoWT
}

enum FuelType {
  DIESEL
  PETROL
  KEROSENE
}

enum FuelRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ISSUED
  ACKNOWLEDGED
  COMPLETED
  CANCELLED
}

enum FuelUrgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Enums
enum InvoiceStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
  CANCELLED
}

// Material Management Enums
enum LocationType {
  STORE
  SITE
  SUPPLIER
}

enum MaterialUrgency {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum MaterialRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ISSUED
  ACKNOWLEDGED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  RECEIPT
  ISSUE
  TRANSFER
  ADJUSTMENT
  RETURN
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  SENT
  RECEIVED
  COMPLETED
  CANCELLED
}
